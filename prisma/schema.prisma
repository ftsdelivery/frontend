generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  CONFIRMED
  CANCELED
  DELIVERED
  OVERDUE
}

enum Role {
  USER
  ADMINISTRATOR
  MANAGER
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model User {
  id              Int      @id @default(autoincrement())
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  email           String   @unique
  name            String?
  role            Role     @default(USER)
  password        String
  admin_password  String?
  orders_count    Int      @default(0)
  used_promocodes String[] @default([])
  reset_token     String?

  @@map("users")
}

model Order {
  id             Int      @id @default(autoincrement())
  status         Status   @default(PENDING)
  author_id      Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  ip             String
  marketplace    String
  warehouse      String
  delivery_type  String
  quantity       Int
  extra_services String
  box_size       String
  box_weight     Float
  pickup_date    String
  pickup_time    String
  pickup_address String
  contacts       String
  comment        String?
  promocode      String?
  price          Float

  @@map("orders")
}

model PromoCode {
  id            Int      @id @default(autoincrement())
  author_id     Int
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  code          String   @unique
  discount      Float
  count_of_uses Int      @default(0)
  limit_of_uses Int      @default(0)
  is_active     Boolean  @default(true)

  @@map("promo_codes")
}

model Log {
  id          Int        @id @default(autoincrement())
  author_id   Int
  created_at  DateTime   @default(now())
  action_type ActionType
  target_id   Int
  target_name String
  old_value   String?
  new_value   String?

  @@map("logs")
}

model Warehouse {
  id             Int    @id @default(autoincrement())
  name           String @unique
  description    String
  marketplace_id Int

  @@map("warehouses")
}

model News {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  title      String
  content    String
  image      String

  @@map("news")
}

model Ticket {
  id             Int      @id @default(autoincrement())
  user_id        Int
  user_name      String
  email          String
  question       String
  question_theme String
  admin_reply    String?
  admin_id       Int?
  status         String   @default("PENDING")
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  @@map("tickets")
}
